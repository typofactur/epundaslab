{
.appVersion = "3410";
.formatVersion = 3;
axes = (
{
name = Weight;
tag = wght;
}
);
customParameters = (
{
name = fsType;
value = (
);
},
{
name = "Use Typo Metrics";
value = 1;
},
{
name = "Use Extension Kerning";
value = 1;
}
);
date = "2025-03-02 18:55:24 +0000";
familyName = "Epunda Slab";
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;

languagesystem latn dflt;
languagesystem latn AZE;
languagesystem latn CRT;
languagesystem latn KAZ;
languagesystem latn TAT;
languagesystem latn TRK;
languagesystem latn ROM;
languagesystem latn MOL;
languagesystem latn MAH;
languagesystem latn CAT;
languagesystem latn NLD;
";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature locl;
feature subs;
feature sinf;
feature sups;
feature numr;
feature dnom;
feature frac;
feature ordn;
feature lnum;
feature pnum;
feature tnum;
feature onum;
feature case;
feature fwid;
feature salt;
feature ss01;
feature ss02;
";
tag = aalt;
},
{
automatic = 1;
code = "lookup ccmp_DFLT_1 {
	@CombiningTopAccents = [acutecomb brevecomb caroncomb circumflexcomb commaturnedabovecomb dieresiscomb dotaccentcomb gravecomb hungarumlautcomb macroncomb ringcomb tildecomb];
	lookupflag UseMarkFilteringSet @CombiningTopAccents;
	sub i' @CombiningTopAccents by idotless;
	sub j' @CombiningTopAccents by jdotless;
} ccmp_DFLT_1;

lookup ccmp_latn_1 {
	lookupflag 0;
	sub fi by f i;
	sub fl by f l;
} ccmp_latn_1;

script latn;
lookup ccmp_latn_1;
";
tag = ccmp;
},
{
automatic = 1;
code = "script latn;
language AZE;
lookup locl_latn_0 {
	sub i by idotaccent;
} locl_latn_0;
language CRT;
lookup locl_latn_0;
language KAZ;
lookup locl_latn_0;
language TAT;
lookup locl_latn_0;
language TRK;
lookup locl_latn_0;

script latn;
language ROM;
lookup locl_latn_1 {
	sub Scedilla by Scommaaccent;
	sub scedilla by scommaaccent;
	sub Tcedilla by Tcommaaccent;
	sub tcedilla by tcommaaccent;
} locl_latn_1;
language MOL;
lookup locl_latn_1;

script latn;
language MAH;
lookup locl_latn_2 {
	sub Lcommaaccent by Lcommaaccent.loclMAH;
	sub Ncommaaccent by Ncommaaccent.loclMAH;
	sub lcommaaccent by lcommaaccent.loclMAH;
	sub ncommaaccent by ncommaaccent.loclMAH;
	sub commaaccentcomb by commaaccentcomb.loclMAH;
} locl_latn_2;

script latn;
language CAT;
lookup locl_latn_3 {
	sub l periodcentered' l by periodcentered.loclCAT;
	sub L periodcentered' L by periodcentered.loclCAT.case;
} locl_latn_3;

script latn;
language NLD;
lookup locl_latn_4 {
	sub iacute j' by jacute;
	sub Iacute J' by Jacute;
} locl_latn_4;
";
tag = locl;
},
{
automatic = 1;
code = "sub zero by zeroinferior;
sub one by oneinferior;
sub two by twoinferior;
sub three by threeinferior;
sub four by fourinferior;
sub five by fiveinferior;
sub six by sixinferior;
sub seven by seveninferior;
sub eight by eightinferior;
sub nine by nineinferior;
";
tag = subs;
},
{
automatic = 1;
code = "sub zero by zeroinferior;
sub one by oneinferior;
sub two by twoinferior;
sub three by threeinferior;
sub four by fourinferior;
sub five by fiveinferior;
sub six by sixinferior;
sub seven by seveninferior;
sub eight by eightinferior;
sub nine by nineinferior;
";
tag = sinf;
},
{
automatic = 1;
code = "sub zero by zerosuperior;
sub one by onesuperior;
sub two by twosuperior;
sub three by threesuperior;
sub four by foursuperior;
sub five by fivesuperior;
sub six by sixsuperior;
sub seven by sevensuperior;
sub eight by eightsuperior;
sub nine by ninesuperior;
";
tag = sups;
},
{
automatic = 1;
code = "sub zero by zero.numr;
sub one by one.numr;
sub two by two.numr;
sub three by three.numr;
sub four by four.numr;
sub five by five.numr;
sub six by six.numr;
sub seven by seven.numr;
sub eight by eight.numr;
sub nine by nine.numr;
";
tag = numr;
},
{
automatic = 1;
code = "sub zero by zero.dnom;
sub one by one.dnom;
sub two by two.dnom;
sub three by three.dnom;
sub four by four.dnom;
sub five by five.dnom;
sub six by six.dnom;
sub seven by seven.dnom;
sub eight by eight.dnom;
sub nine by nine.dnom;
";
tag = dnom;
},
{
automatic = 1;
code = "lookup FRAC {
	sub slash by fraction;
} FRAC;
lookup UP {
	sub [zero one two three four five six seven eight nine] by [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
} UP;
lookup DOWN {
	sub fraction [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' by [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
	sub [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom] [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' by [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
} DOWN;
";
tag = frac;
},
{
automatic = 1;
code = "sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;
sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;
";
tag = ordn;
},
{
automatic = 1;
code = "sub zero by zero.lf;
sub one by one.lf;
sub two by two.lf;
sub three by three.lf;
sub four by four.lf;
sub five by five.lf;
sub six by six.lf;
sub seven by seven.lf;
sub eight by eight.lf;
sub nine by nine.lf;
";
tag = lnum;
},
{
automatic = 1;
code = "sub zero.tf by zero.lf;
sub one.tf by one.lf;
sub two.tf by two.lf;
sub three.tf by three.lf;
sub four.tf by four.lf;
sub five.tf by five.lf;
sub six.tf by six.lf;
sub seven.tf by seven.lf;
sub eight.tf by eight.lf;
sub nine.tf by nine.lf;
sub zero.tosf by zero;
sub one.tosf by one;
sub two.tosf by two;
sub three.tosf by three;
sub four.tosf by four;
sub five.tosf by five;
sub six.tosf by six;
sub seven.tosf by seven;
sub eight.tosf by eight;
sub nine.tosf by nine;
";
tag = pnum;
},
{
automatic = 1;
code = "sub zero.lf by zero.tf;
sub one.lf by one.tf;
sub two.lf by two.tf;
sub three.lf by three.tf;
sub four.lf by four.tf;
sub five.lf by five.tf;
sub six.lf by six.tf;
sub seven.lf by seven.tf;
sub eight.lf by eight.tf;
sub nine.lf by nine.tf;
sub zero by zero.tosf;
sub one by one.tosf;
sub two by two.tosf;
sub three by three.tosf;
sub four by four.tosf;
sub five by five.tosf;
sub six by six.tosf;
sub seven by seven.tosf;
sub eight by eight.tosf;
sub nine by nine.tosf;
";
tag = tnum;
},
{
automatic = 1;
code = "sub zero.lf by zero;
sub one.lf by one;
sub two.lf by two;
sub three.lf by three;
sub four.lf by four;
sub five.lf by five;
sub six.lf by six;
sub seven.lf by seven;
sub eight.lf by eight;
sub nine.lf by nine;
sub zero.tf by zero.tosf;
sub one.tf by one.tosf;
sub two.tf by two.tosf;
sub three.tf by three.tosf;
sub four.tf by four.tosf;
sub five.tf by five.tosf;
sub six.tf by six.tosf;
sub seven.tf by seven.tosf;
sub eight.tf by eight.tosf;
sub nine.tf by nine.tosf;
sub zero by zero.osf;
sub one by one.osf;
sub two by two.osf;
sub three by three.osf;
sub four by four.osf;
sub five by five.osf;
sub six by six.osf;
sub seven by seven.osf;
sub eight by eight.osf;
sub nine by nine.osf;
";
tag = onum;
},
{
automatic = 1;
code = "sub periodcentered.loclCAT by periodcentered.loclCAT.case;
sub zero by zero.lf;
sub one by one.lf;
sub two by two.lf;
sub three by three.lf;
sub four by four.lf;
sub five by five.lf;
sub six by six.lf;
sub seven by seven.lf;
sub eight by eight.lf;
sub nine by nine.lf;
sub zero.osf by zero.lf;
sub one.osf by one.lf;
sub two.osf by two.lf;
sub three.osf by three.lf;
sub four.osf by four.lf;
sub five.osf by five.lf;
sub six.osf by six.lf;
sub seven.osf by seven.lf;
sub eight.osf by eight.lf;
sub nine.osf by nine.lf;
sub zero.tosf by zero.lf;
sub one.tosf by one.lf;
sub two.tosf by two.lf;
sub three.tosf by three.lf;
sub four.tosf by four.lf;
sub five.tosf by five.lf;
sub six.tosf by six.lf;
sub seven.tosf by seven.lf;
sub eight.tosf by eight.lf;
sub nine.tosf by nine.lf;
";
tag = case;
},
{
automatic = 1;
code = "lookupflag IgnoreMarks;
sub f i by fi;
sub f l by fl;
";
tag = liga;
},
{
automatic = 1;
code = "sub space by emspace;
sub ampersand by ampersand.full;
sub asterisk by asterisk.full;
sub at by at.full;
sub backslash by backslash.full;
sub colon by colon.full;
sub comma by comma.full;
sub exclam by exclam.full;
sub numbersign by numbersign.full;
sub percent by percent.full;
sub period by period.full;
sub question by question.full;
sub quotedbl by quotedbl.full;
sub quotesingle by quotesingle.full;
sub semicolon by semicolon.full;
sub slash by slash.full;
sub underscore by underscore.full;
sub hyphen by hyphen.full;
sub braceleft by braceleft.full;
sub braceright by braceright.full;
sub bracketleft by bracketleft.full;
sub bracketright by bracketright.full;
sub parenleft by parenleft.full;
sub parenright by parenright.full;
";
tag = fwid;
},
{
automatic = 1;
code = "sub J by J.salt;
sub K by K.salt;
sub a by a.salt;
sub e by e.salt;
sub g by g.salt;
sub k by k.salt;


sub g from [g.salt2];
";
tag = salt;
},
{
automatic = 1;
code = "sub a by a.ss01;
sub g by g.ss01;
";
labels = (
{
language = dflt;
value = "single storey a and g";
}
);
tag = ss01;
},
{
automatic = 1;
code = "sub a by a.ss02;
sub b by b.ss02;
sub g by g.ss02;
sub q by q.ss02;
";
labels = (
{
language = dflt;
value = "all serifs";
}
);
tag = ss02;
}
);
fontMaster = (
{
axesValues = (
300
);
customParameters = (
{
name = "Master Icon Glyph Name";
value = a;
},
{
name = typoAscender;
value = 985;
},
{
name = typoDescender;
value = -316;
},
{
name = typoLineGap;
value = 0;
},
{
name = hheaAscender;
value = 985;
},
{
name = hheaDescender;
value = -316;
},
{
name = hheaLineGap;
value = 0;
},
{
name = winAscent;
value = 1057;
},
{
name = winDescent;
value = 430;
}
);
iconName = Light;
id = m003;
metricValues = (
{
over = 16;
pos = 700;
},
{
over = 16;
pos = 667;
},
{
over = 16;
pos = 500;
},
{
over = -16;
},
{
over = -16;
pos = -200;
},
{
pos = 12;
}
);
name = "Light Italic";
userData = {
GSOffsetHorizontal = 5;
GSOffsetKeepCompatible = 1;
GSOffsetProportional = 1;
GSOffsetVertical = 10;
KernOnIndependentPairs = (
"T o",
"T G",
"A G",
"V o",
"D A",
"W e",
"W o",
"T O",
"A O",
"W a",
"T C",
"Y e",
"Y o",
"germandbls n",
"T Adieresis",
"N O",
"f i",
"T e",
"f l",
"V a",
"A W",
"O A",
"A V",
"V e",
"W A",
"A Y",
"Lcaron b",
"Lcaron h",
"Lcaron l",
"dcaron b",
"dcaron t",
"lcaron b",
"lcaron h",
"tcaron b",
"tcaron h",
"tcaron k",
"tcaron l",
"L periodcentered.loclCAT.case",
"O O",
"Y odieresis",
"p n",
"l l",
"W adieresis",
"V adieresis",
"N H"
);
KernOnModels = (
"T a",
"T u",
"T udieresis",
"P A",
"T y",
"T A",
"A T",
"V A",
"T r",
"Y A",
"z z",
"V odieresis",
"Y adieresis",
"A C",
"Q A",
"F u",
"W odieresis",
"T Q",
"y g",
"n o",
"u p",
"L a",
"n n",
"V V",
"X X",
"O H",
"U N",
"dcaron h"
);
};
},
{
axesValues = (
900
);
customParameters = (
{
name = "Master Icon Glyph Name";
value = a;
},
{
name = typoAscender;
value = 985;
},
{
name = typoDescender;
value = -316;
},
{
name = typoLineGap;
value = 0;
},
{
name = hheaAscender;
value = 985;
},
{
name = hheaDescender;
value = -316;
},
{
name = hheaLineGap;
value = 0;
},
{
name = winAscent;
value = 1057;
},
{
name = winDescent;
value = 430;
}
);
iconName = Light;
id = m004;
metricValues = (
{
over = 16;
pos = 700;
},
{
over = 16;
pos = 667;
},
{
over = 16;
pos = 500;
},
{
over = -16;
},
{
over = -16;
pos = -200;
},
{
pos = 12;
}
);
name = "Black Italic";
userData = {
GSOffsetAutoStroke = 1;
GSOffsetHorizontal = 60;
GSOffsetKeepCompatible = 1;
GSOffsetProportional = 1;
GSOffsetVertical = 30;
KernOnIndependentPairs = (
"T O",
"A O",
"V c",
"Lcaron b",
"f i",
"Y o",
"V o",
"D A",
"f l",
"Y e",
"T G",
"germandbls n",
"T Adieresis",
"u p",
"V e",
"A C",
"H U",
"W a",
"o o",
"H O",
"A V",
"n v",
"O H",
"Q A",
"V A",
"T Q",
"O O",
"Lcaron h",
"Lcaron k",
"Lcaron l",
"dcaron b",
"dcaron h",
"dcaron k",
"dcaron l",
"dcaron t",
"lcaron b",
"lcaron h",
"lcaron k",
"lcaron l",
"lcaron t",
"tcaron b",
"tcaron f",
"tcaron h",
"tcaron k",
"tcaron l",
"tcaron t",
"L periodcentered.loclCAT.case",
"F u",
"W o",
"p n",
"T o",
"n u",
"H N",
"P A",
"T a",
"V a",
"W odieresis",
"Y odieresis",
"T y",
"O A",
"A T",
"A Y",
"T udieresis",
"T C",
"V odieresis",
"n n"
);
KernOnModels = (
"T e",
"W e",
"A W",
"W A",
"T u",
"Y A",
"T A",
"T r",
"n t",
"A G",
"n w",
"Y adieresis",
"D H",
"N O",
"V adieresis",
"W adieresis",
"y g",
"n o",
"s colon",
"L a",
"l l",
"f n",
"z z",
"v n",
"V V",
"U N",
"X X",
"N H",
"I b"
);
};
}
);
instances = (
{
axesValues = (
300
);
instanceInterpolations = {
m003 = 1;
};
isItalic = 1;
linkStyle = Light;
name = "Light Italic";
weightClass = 300;
},
{
axesValues = (
400
);
instanceInterpolations = {
m003 = 0.83333;
m004 = 0.16667;
};
isItalic = 1;
linkStyle = Regular;
name = "Regular Italic";
},
{
axesValues = (
500
);
instanceInterpolations = {
m003 = 0.66667;
m004 = 0.33333;
};
isItalic = 1;
linkStyle = Medium;
name = "Medium Italic";
weightClass = 500;
},
{
axesValues = (
600
);
instanceInterpolations = {
m003 = 0.5;
m004 = 0.5;
};
isItalic = 1;
linkStyle = SemiBold;
name = "SemiBold Italic";
weightClass = 600;
},
{
axesValues = (
700
);
instanceInterpolations = {
m003 = 0.33333;
m004 = 0.66667;
};
isItalic = 1;
linkStyle = Bold;
name = "Bold Italic";
weightClass = 700;
},
{
axesValues = (
800
);
instanceInterpolations = {
m003 = 0.16667;
m004 = 0.83333;
};
isItalic = 1;
linkStyle = ExtraBold;
name = "ExtraBold Italic";
weightClass = 800;
},
{
axesValues = (
900
);
instanceInterpolations = {
m004 = 1;
};
isItalic = 1;
linkStyle = Black;
name = "Black Italic";
weightClass = 900;
}
);
kerningLTR = {
m003 = {
A = {
C = -30;
G = -40;
O = -40;
T = -60;
V = -40;
W = -60;
Y = -50;
};
D = {
A = -40;
};
F = {
u = -20;
};
L = {
a = -10;
periodcentered.loclCAT.case = -90;
};
Lcaron = {
b = 20;
h = 20;
l = 20;
};
N = {
H = 0;
O = -10;
};
O = {
A = -40;
H = 0;
O = 40;
};
P = {
A = -70;
};
Q = {
A = -30;
};
T = {
A = -60;
Adieresis = -40;
C = -20;
G = -20;
O = -20;
Q = -20;
a = -100;
e = -70;
o = -70;
r = -50;
u = -70;
udieresis = -70;
y = -60;
};
U = {
N = 0;
};
V = {
A = -60;
V = 0;
a = -40;
adieresis = -20;
e = -60;
o = -40;
odieresis = -30;
};
W = {
A = -60;
a = -20;
adieresis = -20;
e = -20;
o = -20;
odieresis = -20;
};
X = {
X = 0;
};
Y = {
A = -50;
adieresis = -30;
e = -40;
o = -40;
odieresis = -30;
};
dcaron = {
b = 40;
h = 40;
t = 0;
};
f = {
i = 1;
l = 30;
};
germandbls = {
n = 0;
};
l = {
l = 0;
};
lcaron = {
b = 40;
h = 40;
};
n = {
n = 0;
o = -10;
};
p = {
n = 0;
};
tcaron = {
b = 40;
h = 50;
k = 30;
l = 50;
};
u = {
p = -10;
};
y = {
g = -10;
};
z = {
z = -35;
};
};
m004 = {
A = {
C = -30;
G = -40;
O = -40;
T = -80;
V = -40;
W = -80;
Y = -100;
};
D = {
A = -40;
H = -30;
};
F = {
u = -20;
};
H = {
N = 0;
O = -40;
U = -1;
};
I = {
b = 20;
};
L = {
a = -10;
periodcentered.loclCAT.case = -170;
};
Lcaron = {
b = 50;
h = 20;
k = 20;
l = 20;
};
N = {
H = 0;
O = -30;
};
O = {
A = -40;
H = 0;
O = 40;
};
P = {
A = -100;
};
Q = {
A = -30;
};
T = {
A = -60;
Adieresis = -40;
C = -20;
G = -20;
O = -20;
Q = -20;
a = -60;
e = -100;
o = -100;
r = -50;
u = -70;
udieresis = -70;
y = -60;
};
U = {
N = 0;
};
V = {
A = -60;
V = 0;
a = -60;
adieresis = -20;
c = -80;
e = -60;
o = -40;
odieresis = -30;
};
W = {
A = -80;
a = -60;
adieresis = -20;
e = -80;
o = -80;
odieresis = -20;
};
X = {
X = 0;
};
Y = {
A = -70;
adieresis = -30;
e = -80;
o = -40;
odieresis = -30;
};
dcaron = {
b = 110;
h = 80;
k = 80;
l = 80;
t = 10;
};
f = {
i = 10;
l = 90;
n = 0;
};
germandbls = {
n = 0;
};
l = {
l = 0;
};
lcaron = {
b = 120;
h = 80;
k = 90;
l = 90;
t = 20;
};
n = {
n = 0;
o = -10;
t = -45;
u = -45;
v = -30;
w = -30;
};
o = {
o = 0;
};
p = {
n = 0;
};
s = {
colon = -10;
};
tcaron = {
b = 130;
f = 30;
h = 100;
k = 100;
l = 100;
t = 50;
};
u = {
p = -10;
};
v = {
n = 0;
};
y = {
g = -10;
};
z = {
z = 0;
};
};
};
metrics = (
{
type = ascender;
},
{
type = "cap height";
},
{
type = "x-height";
},
{
type = baseline;
},
{
type = descender;
},
{
type = "italic angle";
}
);
properties = (
{
key = designers;
values = (
{
language = dflt;
value = "Simon Atzbach";
}
);
},
{
key = designerURL;
value = "https://typofactur.de";
},
{
key = licenses;
values = (
{
language = dflt;
value = "This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is available with a FAQ at: https://openfontlicense.org";
}
);
},
{
key = licenseURL;
value = "https://openfontlicense.org";
},
{
key = manufacturers;
values = (
{
language = dflt;
value = typofactur;
}
);
},
{
key = manufacturerURL;
value = "https://typofactur.de";
},
{
key = vendorID;
value = TYFA;
}
);
unitsPerEm = 1000;
userData = {
GSDimensionPlugin.Dimensions = {
m002 = {
HH = "140";
HV = "182";
OH = "120";
OV = "192";
nV = "180";
oH = "116";
oV = "182";
tH = "120";
};
m01 = {
HH = "60";
HV = "63";
OH = "60";
OV = "72";
nV = "60";
oH = "55";
oV = "62";
tH = "55";
};
};
KernOnKerningWeightLimit = 36000;
KernOnRegenerateGroups = 1;
KernOnVersion = "1.34";
};
versionMajor = 1;
versionMinor = 103;
}
